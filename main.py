import random

from graph import Graph
import unittest as ut
import matplotlib.pyplot as plt
import sys
from collections import defaultdict
import time
import numpy as np
import math
from scipy.special import comb


class BB:

    def __init__(self, g, m, s, e):
        self.graph = g
        self.min_items = m
        self.start_node = s
        self.end_node = e

    # calculate cost
    def calc_cost(self, path_from_start):
        if path_from_start is not None:
            return self.lower_bound(path_from_start[-1], path_from_start)
        else:
            return 0

    # select from F the (v,path_from_start) where the cost between s and v is the lowest
    def select_v_with_lowest_cost(self, f):
        min_node = None
        min_cost = sys.maxsize
        for node in f.keys():
            if min_cost > f[node][1]:
                min_node = node
                min_cost = f[node][1]
        return min_node

    # expand configuration
    def expand(self, node, f):
        if f[node][0] is None:
            path_from_start = []
        else:
            path_from_start = f[node][0]

        configuration = []
        for neighbour in self.graph[node].keys():
            temp = list.copy(path_from_start)
            if node not in temp:
                temp.insert(0, node)
            if neighbour not in path_from_start:
                temp.append(neighbour)
                configuration.append(temp)
        return configuration

    # return distance of edges in path
    def calculate_distance(self, path):
        distances = []
        for i in range(len(path) - 1):
            distances.append(self.graph[path[i]][path[i + 1]])
        return distances

    def shortest_path(self):
        if self.start_node not in self.graph.keys():
            print("start node not in graph")
            return
        if self.start_node not in self.graph.keys():
            print("end nod not in graph")
            return
        f = defaultdict(lambda: [])  # contains {v:path_from_start, cost}
        f[self.start_node] = [[], 1.0]
        b = ["", [], sys.maxsize]  # [lastNode, path_from_start,cost]}
        visited = defaultdict(lambda: [])  # contains {v:[path_from_start, cost]}
        while f is not None:
            # select from f the (v,path_from_start) where the cost between s and v is the lowest
            min_v = self.select_v_with_lowest_cost(f)
            # Expand
            configurations = self.expand(min_v, f)
            # if we arrived to dead end
            if not configurations:
                del f[min_v]

            for path_from_start in configurations:
                last_node_in_path_from_start = path_from_start[-1]
                # calculate cost for v
                c = self.calc_cost(path_from_start)
                # check if this node visited before or not
                if min_v not in visited.keys():
                    visited[min_v] = []
                    visited[min_v].append(path_from_start)  # add path_from_start
                    visited[min_v].append(c)  # add cost

                # update best if it contains path from start that already discarded
                flag = False
                for i in f.values():
                    if b[1] is i[0]:
                        flag =True
                if flag is False:
                    b = ["", [], sys.maxsize]
                # delete the node because we dont want it to expand again
                if min_v in f.keys():
                    del f[min_v]

                if visited[last_node_in_path_from_start] != [] and visited[last_node_in_path_from_start][1] < c:
                    check = "dead end"
                elif last_node_in_path_from_start is self.end_node and len(path_from_start) >= self.min_items:
                    check = "solution found"
                else:
                    check = "continue"

                if check == "solution found":
                    return path_from_start
                elif check == "dead end":
                    # discard configuration
                    configurations.remove(path_from_start)
                else:

                    if self.lower_bound(last_node_in_path_from_start, path_from_start) < b[2]:
                        cost = self.lower_bound(last_node_in_path_from_start, path_from_start)
                        f[last_node_in_path_from_start] = [path_from_start, cost]
                        b = [last_node_in_path_from_start, path_from_start, cost]

        return b

    def lower_bound(self, v, path_from_start):
        all_edge_weights = self.calculate_distance(path_from_start)
        total_distance = sum(all_edge_weights)
        items = len(path_from_start)
        cost = total_distance / items
        return cost


class Experiments:
    def __init__(self):
        self.totalTime = []

    def test_tiny_graph(self):
        """
       :param None

       :return: an bb object
       """
        g2 = Graph()
        # create a graph
        g2.add_edge_undirected("a", "b", 3)
        g2.add_edge_undirected("a", "c", 5)
        g2.add_edge_undirected("b", "d", 1)
        g2.add_edge_undirected("b", "e", 3)
        g2.add_edge_undirected("c", "a", 5)
        g2.add_edge_undirected("c", "e", 3)
        g2.add_edge_undirected("d", "f", 2)
        g2.add_edge_undirected("d", "e", 1)
        g2.add_edge_undirected("d", "b", 1)
        g2.add_edge_undirected("e", "c", 3)
        g2.add_edge_undirected("e", "b", 2)
        g2.add_edge_undirected("e", "d", 1)
        g2.add_edge_undirected("e", "f", 4)
        g2.add_edge_undirected("f", "g", 1)
        g2.add_edge_undirected("g", "f", 1)
        g2.create_adjacency_list()
        print("graph = ", g2.adjacency_list)
        min = 2
        start = "a"
        end = "g"
        b = BB(g2.adjacency_list, min, start, end)
        print("shortest path = ", b.shortest_path())
        return b


    def trials(self, n):
        """ Takes number of trials and expierment"""
        for i in range(1, n):
            self.test_tiny_graph(2)

    def timer(self, bb):
        """
        Time analysis

        Takes in a bb object, and calculates the time to run
        the shortest path on it once

        :type bb: BB
        :param bb:
        :return: float
        """
        timer_on = time.time()
        bb.shortest_path()
        timer_off = time.time()
        self.totalTime.append(timer_off - timer_on)
        timer_off = time.time()

        return timer_off - timer_on

    def plot_by_min(self, mins, t):
        """
        :param mins: List
            list of mins
        :param t: int
            num of trials
        :return: None, but prints plots
        """

        all_data = []
        for min_ in mins:
            runtimes = []
            for i in range(0, t):
                b = self.min_graphs(min_)
                runtimes.append(self.timer(b))
            all_data.append(runtimes)
        means = []
        sd = []
        for x in all_data:
            means.append(sum(x) / t)
            sd.append(np.std(x))  # get standard deviations

        plt.errorbar(mins, means, sd, linestyle='-', marker='^')
        plt.xlabel('Min')
        plt.ylabel('Runtime')
        plt.title('BB')

        # plt.legend()
        plt.show()

    def plot_by_size(self, t):
        """
        :param t: int
            num of trials
        :return: None, but prints plots
        """
        sizes = [10, 50, 90, 140,190]
        all_data = []
        for size in sizes:
            runtimes = []
            for i in range(0, t):
                b = self.size_graph(size)
                runtimes.append(self.timer(b))
            all_data.append(runtimes)
        means = []
        sd = []
        for x in all_data:
            means.append(sum(x) / t)
            sd.append(np.std(x))  # get standard deviations

        plt.errorbar(sizes, means, sd, linestyle='-', marker='^')
        plt.xlabel('Size')
        plt.ylabel('Runtime')
        plt.title('BB')

        plt.show()

    def plot_by_density(self, t):
        """
        :param t: int
            num of trials
        :return: None, but prints plots
        """
        sizes = [10, 50, 90, 140,190]
        densities = []
        all_data = []

        for size in sizes:
            runtimes = []
            densities.append(self.get_density(self.size_graph(size,"graph")))
            for i in range(0, t):
                b = self.size_graph(size)
                runtimes.append(self.timer(b))
            all_data.append(runtimes)

        means = []
        sd = []
        for x in all_data:
            means.append(sum(x) / t)
            sd.append(np.std(x))  # get standard deviations

        plt.errorbar(densities, means, sd, linestyle='-', marker='^')
        plt.xlabel('Density')
        plt.ylabel('Runtime')
        plt.title('BB')

        plt.show()

    def min_graphs(self,min):
        """
        :param min: minimum desired nodes

        :return: an bb object
        """
        # for size 100 start =1 end = 38
        minsize100 = {1: {2: 35, 3: 43, 5: 26, 6: 21, 12: 45, 82: 50, 7: 14, 11: 34, 19: 11, 30: 49}, 2: {1: 35, 4: 41, 9: 24, 21: 21, 22: 23, 28: 7, 49: 19, 84: 8, 82: 11, 98: 5, 8: 13, 100: 48, 71: 4, 45: 37}, 3: {1: 43, 7: 4, 83: 31, 80: 26, 70: 45, 43: 23, 31: 9, 74: 42}, 4: {2: 41, 13: 49, 16: 28, 17: 44, 58: 19, 11: 18, 67: 43, 73: 25, 98: 33, 85: 36}, 5: {1: 26, 10: 30, 15: 6, 99: 44, 11: 37, 34: 34, 80: 12}, 6: {1: 21, 31: 48, 41: 48, 73: 19, 24: 6, 90: 47, 88: 41, 72: 37, 15: 44}, 7: {3: 4, 8: 30, 11: 22, 24: 1, 43: 28, 50: 25, 85: 13, 1: 14, 82: 28, 100: 36, 22: 14, 33: 27}, 8: {7: 30, 60: 14, 93: 18, 2: 13, 28: 40, 69: 27}, 9: {2: 24, 19: 13, 27: 22, 89: 16, 57: 14, 100: 29, 22: 8, 92: 21, 86: 2, 55: 49}, 10: {5: 30, 78: 10, 92: 14}, 11: {7: 22, 29: 31, 52: 12, 5: 37, 1: 34, 30: 41, 4: 18, 43: 32, 54: 10, 36: 35, 23: 36, 46: 45, 89: 38, 71: 50, 88: 30}, 12: {1: 45, 14: 49, 44: 10, 74: 17, 29: 49, 94: 44, 47: 12}, 13: {4: 49, 32: 11}, 14: {12: 49, 18: 20, 61: 24, 24: 18, 47: 22, 78: 30, 84: 39}, 15: {5: 6, 26: 32, 95: 37, 56: 12, 6: 44, 50: 1}, 16: {4: 28, 30: 32, 33: 5, 45: 36, 58: 22, 81: 3, 52: 18, 68: 10}, 17: {4: 44, 36: 21, 37: 19, 69: 22, 68: 47, 44: 5, 81: 10, 43: 3, 41: 39}, 18: {14: 20, 20: 25, 80: 43}, 19: {9: 13, 25: 11, 21: 31, 75: 3, 1: 11, 82: 19, 57: 8}, 20: {18: 25, 26: 23, 35: 25, 60: 20, 74: 44, 41: 18, 45: 7}, 21: {2: 21, 23: 14, 63: 34, 86: 39, 99: 18, 97: 20, 19: 31, 79: 12, 30: 30, 93: 32, 80: 19, 50: 9, 91: 5}, 22: {2: 23, 39: 38, 42: 2, 59: 24, 9: 8, 7: 14, 34: 27, 71: 31}, 23: {21: 14, 40: 20, 66: 11, 64: 10, 98: 50, 65: 20, 83: 7, 93: 42, 11: 36, 54: 35}, 24: {7: 1, 65: 18, 91: 5, 6: 6, 71: 41, 14: 18, 60: 21, 28: 1, 97: 50}, 25: {19: 11, 78: 27, 84: 23}, 26: {20: 23, 15: 32, 53: 50, 78: 22, 85: 1, 66: 16, 27: 37, 87: 42}, 27: {9: 22, 68: 15, 81: 31, 76: 25, 26: 37}, 28: {2: 7, 68: 50, 37: 33, 8: 40, 24: 1}, 29: {11: 31, 39: 1, 12: 49, 48: 14}, 30: {16: 32, 45: 15, 11: 41, 42: 3, 50: 40, 21: 30, 93: 40, 1: 49}, 31: {6: 48, 47: 28, 64: 15, 74: 46, 51: 9, 89: 28, 32: 35, 3: 9, 84: 18}, 32: {13: 11, 34: 5, 71: 8, 96: 8, 68: 35, 43: 38, 31: 35}, 33: {16: 5, 45: 15, 63: 21, 47: 40, 40: 24, 7: 27}, 34: {32: 5, 5: 34, 95: 9, 79: 2, 22: 27}, 35: {20: 25, 92: 11, 88: 4, 63: 7, 72: 24, 54: 16}, 36: {17: 21, 38: 28, 57: 12, 80: 22, 96: 39, 11: 35, 66: 42, 67: 31}, 37: {17: 19, 42: 24, 100: 24, 63: 40, 28: 33, 96: 2}, 38: {36: 28, 49: 23, 87: 31, 68: 2, 98: 41}, 39: {22: 38, 29: 1, 82: 17}, 40: {23: 20, 95: 17, 78: 18, 99: 34, 69: 15, 42: 32, 33: 24}, 41: {6: 48, 49: 31, 57: 14, 90: 35, 82: 31, 17: 39, 20: 18}, 42: {22: 2, 46: 21, 55: 1, 61: 40, 78: 2, 81: 50, 37: 24, 99: 38, 30: 3, 98: 22, 40: 32}, 43: {7: 28, 54: 14, 74: 32, 11: 32, 58: 18, 32: 38, 17: 3, 45: 24, 3: 23, 82: 5}, 44: {12: 10, 48: 40, 53: 17, 98: 23, 57: 10, 17: 5, 59: 42, 73: 2, 86: 25}, 45: {16: 36, 30: 15, 33: 15, 43: 24, 59: 3, 20: 7, 95: 32, 2: 37}, 46: {42: 21, 58: 30, 99: 36, 71: 10, 11: 45, 63: 20}, 47: {31: 28, 62: 1, 75: 10, 82: 33, 14: 22, 33: 40, 12: 12}, 48: {44: 40, 100: 26, 29: 14, 60: 22}, 49: {2: 19, 38: 23, 41: 31, 76: 18, 81: 17}, 50: {7: 25, 51: 27, 70: 19, 30: 40, 21: 9, 15: 1, 61: 10}, 51: {50: 27, 67: 40, 31: 9, 98: 37, 91: 23, 77: 24, 90: 30}, 52: {11: 12, 56: 38, 16: 18, 97: 47}, 53: {44: 17, 74: 45, 77: 28, 26: 50, 71: 42, 57: 37, 97: 34}, 54: {43: 14, 93: 43, 11: 10, 99: 39, 94: 39, 23: 35, 35: 16}, 55: {42: 1, 97: 17, 56: 30, 75: 9, 9: 49}, 56: {52: 38, 55: 30, 15: 12}, 57: {36: 12, 9: 14, 44: 10, 41: 14, 53: 37, 70: 6, 19: 8}, 58: {16: 22, 72: 8, 4: 19, 46: 30, 43: 18, 93: 45, 83: 30}, 59: {22: 24, 44: 42, 95: 20, 45: 3, 61: 1}, 60: {8: 14, 79: 2, 20: 20, 95: 12, 24: 21, 78: 44, 69: 50, 71: 25, 62: 49, 48: 22, 75: 7}, 61: {42: 40, 14: 24, 76: 25, 80: 23, 50: 10, 59: 1}, 62: {47: 1, 70: 30, 60: 49}, 63: {21: 34, 88: 21, 33: 21, 84: 36, 37: 40, 35: 7, 46: 20}, 64: {31: 15, 23: 10, 86: 21}, 65: {24: 18, 23: 20}, 66: {23: 11, 76: 25, 99: 36, 91: 21, 36: 42, 26: 16}, 67: {51: 40, 4: 43, 86: 24, 96: 48, 97: 26, 36: 31}, 68: {27: 15, 17: 47, 72: 27, 32: 35, 93: 16, 16: 10, 28: 50, 69: 1, 38: 2, 100: 18}, 69: {17: 22, 79: 5, 99: 15, 60: 50, 68: 1, 40: 15, 83: 1, 8: 27}, 70: {50: 19, 75: 6, 3: 45, 91: 44, 74: 28, 62: 30, 57: 6, 99: 1}, 71: {32: 8, 84: 18, 24: 41, 53: 42, 60: 25, 46: 10, 2: 4, 22: 31, 11: 50}, 72: {58: 8, 90: 11, 68: 27, 6: 37, 89: 27, 35: 24, 78: 18, 74: 40}, 73: {6: 19, 87: 49, 97: 11, 4: 25, 98: 26, 44: 2}, 74: {53: 45, 92: 32, 43: 32, 31: 46, 70: 28, 12: 17, 20: 44, 72: 40, 3: 42}, 75: {47: 10, 70: 6, 19: 3, 55: 9, 76: 21, 60: 7}, 76: {66: 25, 84: 10, 27: 25, 49: 18, 75: 21, 85: 27, 61: 25}, 77: {53: 28, 82: 35, 51: 24}, 78: {10: 10, 42: 2, 40: 18, 98: 45, 26: 22, 87: 9, 83: 22, 60: 44, 14: 30, 72: 18, 25: 27}, 79: {69: 5, 60: 2, 21: 12, 34: 2, 84: 46}, 80: {36: 22, 3: 26, 21: 19, 18: 43, 61: 23, 5: 12}, 81: {27: 31, 16: 3, 42: 50, 92: 11, 17: 10, 49: 17, 88: 25, 82: 10, 87: 6}, 82: {1: 50, 94: 11, 7: 28, 47: 33, 2: 11, 39: 17, 41: 31, 77: 35, 19: 19, 81: 10, 43: 5}, 83: {3: 31, 23: 7, 78: 22, 58: 30, 69: 1}, 84: {76: 10, 2: 8, 71: 18, 63: 36, 79: 46, 31: 18, 25: 23, 14: 39}, 85: {7: 13, 26: 1, 4: 36, 86: 34, 76: 27}, 86: {21: 39, 67: 24, 9: 2, 64: 21, 85: 34, 44: 25, 92: 35}, 87: {73: 49, 98: 48, 78: 9, 38: 31, 81: 6, 26: 42}, 88: {63: 21, 90: 15, 6: 41, 81: 25, 35: 4, 11: 30}, 89: {9: 16, 94: 24, 72: 27, 31: 28, 90: 42, 11: 38}, 90: {72: 11, 88: 15, 41: 35, 6: 47, 93: 39, 89: 42, 51: 30}, 91: {24: 5, 70: 44, 66: 21, 51: 23, 21: 5}, 92: {74: 32, 81: 11, 9: 21, 35: 11, 95: 29, 10: 14, 86: 35}, 93: {8: 18, 54: 43, 58: 45, 68: 16, 90: 39, 21: 32, 23: 42, 30: 40}, 94: {82: 11, 100: 29, 89: 24, 12: 44, 54: 39}, 95: {40: 17, 60: 12, 15: 37, 34: 9, 92: 29, 59: 20, 45: 32}, 96: {32: 8, 36: 39, 67: 48, 37: 2}, 97: {55: 17, 73: 11, 21: 20, 52: 47, 53: 34, 67: 26, 24: 50}, 98: {87: 48, 23: 50, 44: 23, 78: 45, 2: 5, 4: 33, 73: 26, 42: 22, 51: 37, 38: 41}, 99: {5: 44, 21: 18, 66: 36, 46: 36, 40: 34, 42: 38, 69: 15, 54: 39, 70: 1}, 100: {48: 26, 9: 29, 7: 36, 94: 29, 37: 24, 2: 48, 68: 18}}
        start = 1
        end = 100
        test = BB(minsize100, min, start, end)
        return test

    def size_graph(self,size,select=None):
        """
        :param size: size of graph

        :return: an bb object or graph
        """
        # all for min 3
        if size == 10:
            size10 = {1: {2: 32, 3: 22, 4: 19, 7: 41, 10: 43, 5: 37, 8: 34, 9: 3, 6: 40}, 2: {1: 32, 9: 14, 3: 28, 10: 15, 7: 32, 5: 2, 8: 30, 6: 15, 4: 44}, 3: {1: 22, 5: 18, 6: 14, 2: 28, 9: 47, 4: 28, 8: 35, 10: 44, 7: 8}, 4: {1: 19, 7: 43, 3: 28, 6: 18, 10: 35, 8: 42, 5: 48, 9: 30, 2: 44}, 5: {3: 18, 8: 28, 6: 28, 7: 6, 9: 45, 1: 37, 4: 48, 2: 2, 10: 36}, 6: {3: 14, 5: 28, 9: 3, 10: 39, 4: 18, 1: 40, 8: 42, 2: 15, 7: 5}, 7: {4: 43, 1: 41, 5: 6, 8: 12, 9: 19, 10: 30, 2: 32, 3: 8, 6: 5}, 8: {5: 28, 10: 20, 7: 12, 3: 35, 4: 42, 1: 34, 9: 38, 6: 42, 2: 30}, 9: {2: 14, 3: 47, 10: 18, 6: 3, 5: 45, 7: 19, 1: 3, 8: 38, 4: 30}, 10: {8: 20, 9: 18, 6: 39, 4: 35, 2: 15, 1: 43, 7: 30, 5: 36, 3: 44}}
            g = size10
        if size == 50:
            size50 = {1: {2: 47, 3: 17, 5: 18, 22: 11, 23: 10}, 2: {1: 47, 4: 36, 13: 21, 18: 41, 21: 20, 39: 24}, 3: {1: 17, 7: 24, 11: 46}, 4: {2: 36, 9: 35, 24: 35, 42: 24}, 5: {1: 18, 6: 12}, 6: {5: 12, 8: 35, 31: 24, 43: 49}, 7: {3: 24, 14: 46, 25: 37, 44: 19}, 8: {6: 35, 10: 24, 17: 30}, 9: {4: 35, 12: 38, 20: 21, 30: 20}, 10: {8: 24, 16: 1}, 11: {3: 46, 40: 14}, 12: {9: 38, 19: 20}, 13: {2: 21}, 14: {7: 46, 15: 46, 37: 43}, 15: {14: 46}, 16: {10: 1}, 17: {8: 30, 26: 50, 38: 21}, 18: {2: 41, 45: 37, 47: 23}, 19: {12: 20, 33: 15, 36: 18}, 20: {9: 21, 27: 25, 29: 33, 32: 42}, 21: {2: 20}, 22: {1: 11}, 23: {1: 10, 34: 40}, 24: {4: 35}, 25: {7: 37, 28: 11}, 26: {17: 50}, 27: {20: 25}, 28: {25: 11, 35: 46}, 29: {20: 33}, 30: {9: 20, 48: 38, 50: 11}, 31: {6: 24}, 32: {20: 42}, 33: {19: 15}, 34: {23: 40}, 35: {28: 46}, 36: {19: 18}, 37: {14: 43}, 38: {17: 21, 41: 27}, 39: {2: 24}, 40: {11: 14}, 41: {38: 27}, 42: {4: 24}, 43: {6: 49, 46: 43}, 44: {7: 19}, 45: {18: 37, 49: 18}, 46: {43: 43}, 47: {18: 23}, 48: {30: 38}, 49: {45: 18}, 50: {30: 11}}
            g = size50
        if size == 90:
            size90 = {1: {2: 36, 3: 9, 4: 27, 5: 15, 8: 2, 11: 1, 74: 8}, 2: {1: 36, 6: 3, 10: 31, 23: 9, 59: 1, 60: 21}, 3: {1: 9, 23: 6, 63: 50, 90: 28, 87: 33, 31: 9}, 4: {1: 27, 51: 49, 40: 17}, 5: {1: 15, 13: 22, 10: 31, 20: 34, 78: 21}, 6: {2: 3, 7: 8, 19: 28, 60: 28}, 7: {6: 8, 9: 27, 39: 35, 86: 6, 66: 1, 80: 50}, 8: {1: 2, 14: 18, 17: 32, 28: 49, 30: 42, 49: 2}, 9: {7: 27, 44: 46}, 10: {2: 31, 12: 18, 65: 10, 5: 31}, 11: {1: 1, 15: 14, 41: 27, 45: 10, 63: 27}, 12: {10: 18, 16: 29, 36: 17, 27: 47, 55: 17, 83: 36}, 13: {5: 22, 18: 26, 22: 12, 24: 25}, 14: {8: 18, 57: 35}, 15: {11: 14, 25: 10, 38: 28, 40: 20, 79: 16}, 16: {12: 29}, 17: {8: 32, 53: 34}, 18: {13: 26, 20: 38, 87: 13}, 19: {6: 28, 21: 10, 65: 29, 45: 22}, 20: {18: 38, 5: 34}, 21: {19: 10, 29: 10, 42: 15, 64: 40, 30: 28}, 22: {13: 12, 26: 41, 27: 26, 33: 17}, 23: {3: 6, 85: 7, 2: 9, 59: 39}, 24: {13: 25, 76: 42, 89: 9, 29: 6}, 25: {15: 10, 32: 26, 52: 41, 79: 21}, 26: {22: 41}, 27: {22: 26, 88: 39, 55: 48, 12: 47, 64: 20, 40: 40, 41: 48}, 28: {8: 49, 55: 32, 44: 6}, 29: {21: 10, 31: 28, 66: 13, 52: 3, 24: 6}, 30: {8: 42, 62: 1, 81: 44, 21: 28}, 31: {29: 28, 34: 46, 54: 29, 65: 46, 64: 34, 82: 37, 3: 9, 56: 49}, 32: {25: 26, 78: 1}, 33: {22: 17, 35: 19, 86: 43, 64: 21, 48: 44}, 34: {31: 46, 37: 16, 54: 29}, 35: {33: 19, 48: 40}, 36: {12: 17, 47: 9, 50: 8, 56: 2}, 37: {34: 16}, 38: {15: 28, 47: 40}, 39: {7: 35, 75: 4, 83: 13, 67: 10, 73: 1}, 40: {15: 20, 43: 24, 56: 34, 71: 47, 81: 27, 53: 32, 27: 40, 4: 17}, 41: {11: 27, 27: 48, 83: 19}, 42: {21: 15, 60: 46, 74: 18}, 43: {40: 24}, 44: {9: 46, 46: 42, 28: 6}, 45: {11: 10, 68: 6, 77: 21, 84: 42, 19: 22}, 46: {44: 42, 49: 26}, 47: {36: 9, 72: 45, 38: 40}, 48: {35: 40, 58: 27, 59: 22, 33: 44}, 49: {8: 2, 57: 16, 84: 1, 72: 30, 46: 26}, 50: {36: 8, 82: 41}, 51: {4: 49}, 52: {25: 41, 29: 3}, 53: {17: 34, 73: 39, 40: 32, 74: 39}, 54: {31: 29, 34: 29, 87: 18}, 55: {28: 32, 27: 48, 60: 6, 12: 17}, 56: {40: 34, 61: 15, 36: 2, 75: 47, 31: 49}, 57: {49: 16, 14: 35}, 58: {48: 27}, 59: {48: 22, 23: 39, 2: 1}, 60: {42: 46, 68: 28, 55: 6, 6: 28, 2: 21}, 61: {56: 15, 77: 49}, 62: {30: 1, 65: 31}, 63: {3: 50, 11: 27}, 64: {21: 40, 27: 20, 31: 34, 77: 38, 33: 21}, 65: {19: 29, 10: 10, 62: 31, 31: 46, 85: 30}, 66: {29: 13, 67: 48, 7: 1}, 67: {66: 48, 69: 37, 39: 10}, 68: {60: 28, 70: 48, 45: 6}, 69: {67: 37}, 70: {68: 48, 80: 17}, 71: {40: 47}, 72: {47: 45, 49: 30}, 73: {53: 39, 39: 1}, 74: {42: 18, 1: 8, 53: 39}, 75: {39: 4, 56: 47, 85: 40}, 76: {24: 42}, 77: {61: 49, 45: 21, 64: 38}, 78: {32: 1, 87: 38, 5: 21}, 79: {25: 21, 15: 16, 90: 33}, 80: {70: 17, 7: 50}, 81: {40: 27, 30: 44}, 82: {50: 41, 31: 37}, 83: {39: 13, 41: 19, 12: 36}, 84: {49: 1, 45: 42}, 85: {23: 7, 86: 4, 75: 40, 65: 30}, 86: {7: 6, 33: 43, 85: 4}, 87: {78: 38, 18: 13, 54: 18, 3: 33}, 88: {27: 39}, 89: {24: 9}, 90: {3: 28, 79: 33}}
            g = size90
        if size == 140:
            size140 = {1: {2: 23, 4: 40, 5: 10, 6: 23, 7: 17, 12: 26, 26: 15, 37: 36, 127: 33, 74: 34}, 2: {1: 23, 3: 25, 9: 26, 81: 33, 121: 31, 131: 46, 16: 33}, 3: {2: 25, 8: 3, 18: 14, 25: 23, 27: 37, 36: 2, 47: 15, 121: 19, 98: 46, 43: 28}, 4: {1: 40, 11: 49, 13: 42, 17: 38, 71: 6, 109: 40, 65: 9}, 5: {1: 10, 14: 8, 55: 32, 56: 39, 59: 5, 113: 35, 139: 32, 126: 46, 30: 26}, 6: {1: 23, 19: 38, 21: 28, 34: 18, 49: 28, 98: 14, 101: 42, 130: 50, 129: 2, 33: 16, 132: 2}, 7: {1: 17, 15: 1, 45: 8, 43: 26, 23: 37, 110: 12, 123: 9, 59: 21, 99: 4}, 8: {3: 3, 28: 11, 125: 8, 39: 31, 21: 17, 100: 35}, 9: {2: 26, 10: 17, 110: 14, 120: 42}, 10: {9: 17, 30: 16, 102: 40, 128: 3, 35: 11, 83: 4}, 11: {4: 49, 62: 26, 77: 24, 123: 41, 112: 14, 126: 15}, 12: {1: 26, 70: 13, 72: 2}, 13: {4: 42, 55: 29, 68: 48, 91: 23, 28: 43}, 14: {5: 8, 16: 48, 29: 33, 31: 23, 63: 28, 40: 13, 64: 10}, 15: {7: 1, 41: 7, 67: 37, 82: 22, 83: 34}, 16: {14: 48, 2: 33}, 17: {4: 38, 20: 6, 22: 29, 33: 21, 84: 16, 56: 25, 37: 17, 55: 20, 62: 48}, 18: {3: 14, 23: 49, 32: 6, 65: 29}, 19: {6: 38, 24: 35, 35: 8, 64: 31, 72: 11, 103: 39, 127: 10, 136: 18}, 20: {17: 6, 92: 25, 134: 29, 36: 25, 58: 36, 61: 28}, 21: {6: 28, 8: 17, 76: 33, 53: 46, 66: 38}, 22: {17: 29, 39: 24, 51: 5, 138: 30, 86: 2, 82: 26, 59: 5, 119: 41, 77: 29}, 23: {18: 49, 7: 37, 55: 22}, 24: {19: 35, 53: 5, 107: 45, 71: 7}, 25: {3: 23, 42: 20, 97: 2}, 26: {1: 15}, 27: {3: 37, 38: 30, 68: 13, 29: 29, 119: 21, 47: 33, 60: 42}, 28: {8: 11, 52: 42, 13: 43}, 29: {14: 33, 40: 37, 27: 29, 113: 2, 120: 26, 69: 38, 136: 38, 98: 42}, 30: {10: 16, 46: 45, 89: 25, 95: 18, 40: 7, 5: 26}, 31: {14: 23, 39: 38, 87: 32, 124: 40}, 32: {18: 6, 76: 36, 125: 42, 93: 38}, 33: {17: 21, 73: 32, 6: 16}, 34: {6: 18, 75: 27, 116: 8}, 35: {19: 8, 10: 11, 44: 41}, 36: {3: 2, 43: 26, 48: 40, 118: 3, 20: 25}, 37: {1: 36, 17: 17, 117: 9, 88: 4}, 38: {27: 30, 110: 26, 74: 6}, 39: {22: 24, 57: 36, 122: 3, 133: 5, 131: 33, 102: 18, 8: 31, 31: 38, 103: 36}, 40: {29: 37, 14: 13, 30: 7, 120: 41}, 41: {15: 7, 52: 38, 79: 27, 82: 17, 116: 31, 68: 8}, 42: {25: 20, 58: 8, 132: 10, 112: 6, 56: 9}, 43: {36: 26, 44: 36, 7: 26, 3: 28, 113: 31}, 44: {43: 36, 91: 11, 48: 39, 35: 41, 128: 13}, 45: {7: 8, 50: 41, 54: 30, 61: 34, 100: 38, 126: 14, 63: 29}, 46: {30: 45, 86: 36, 94: 28, 69: 19}, 47: {3: 15, 27: 33, 68: 35}, 48: {36: 40, 83: 7, 139: 21, 108: 35, 44: 39, 66: 1, 93: 27, 56: 44}, 49: {6: 28, 119: 11, 114: 37}, 50: {45: 41}, 51: {22: 5, 95: 50, 129: 37}, 52: {41: 38, 74: 33, 56: 14, 87: 29, 28: 42}, 53: {24: 5, 69: 47, 111: 30, 21: 46}, 54: {45: 30, 87: 13, 92: 44}, 55: {5: 32, 78: 14, 17: 20, 13: 29, 23: 22}, 56: {5: 39, 17: 25, 52: 14, 42: 9, 48: 44}, 57: {39: 36, 139: 36}, 58: {42: 8, 60: 45, 20: 36, 109: 18}, 59: {5: 5, 104: 24, 124: 8, 109: 17, 68: 42, 22: 5, 130: 31, 7: 21}, 60: {58: 45, 97: 4, 27: 42}, 61: {45: 34, 93: 25, 20: 28}, 62: {11: 26, 66: 20, 96: 44, 120: 38, 17: 48}, 63: {14: 28, 91: 14, 45: 29}, 64: {19: 31, 110: 23, 14: 10}, 65: {18: 29, 126: 31, 4: 9, 116: 43}, 66: {62: 20, 115: 12, 91: 11, 48: 1, 21: 38}, 67: {15: 37, 93: 48, 105: 48, 69: 16, 80: 14, 130: 12}, 68: {27: 13, 59: 42, 13: 48, 47: 35, 41: 8}, 69: {53: 47, 67: 16, 29: 38, 46: 19}, 70: {12: 13, 80: 34}, 71: {4: 6, 99: 40, 137: 32, 91: 16, 24: 7, 95: 27}, 72: {19: 11, 12: 2, 103: 9}, 73: {33: 32}, 74: {52: 33, 88: 32, 91: 30, 120: 41, 117: 31, 1: 34, 38: 6}, 75: {34: 27, 76: 29, 93: 25, 105: 44}, 76: {75: 29, 90: 29, 21: 33, 32: 36}, 77: {11: 24, 138: 47, 108: 35, 22: 29}, 78: {55: 14, 117: 21, 113: 47, 130: 19, 140: 20}, 79: {41: 27, 117: 22, 98: 35}, 80: {70: 34, 85: 22, 125: 3, 112: 27, 67: 14}, 81: {2: 33, 124: 15}, 82: {41: 17, 116: 27, 22: 26, 15: 22}, 83: {48: 7, 126: 34, 10: 4, 135: 21, 15: 34}, 84: {17: 16}, 85: {80: 22, 129: 24, 123: 10, 94: 41}, 86: {46: 36, 106: 43, 22: 2, 96: 24}, 87: {54: 13, 90: 19, 52: 29, 31: 32}, 88: {74: 32, 110: 32, 37: 4}, 89: {30: 25, 107: 31, 122: 44}, 90: {87: 19, 95: 16, 108: 8, 76: 29}, 91: {74: 30, 44: 11, 66: 11, 63: 14, 71: 16, 13: 23, 110: 39}, 92: {20: 25, 54: 44, 95: 15, 96: 12, 94: 35}, 93: {67: 48, 112: 9, 75: 25, 61: 25, 48: 27, 32: 38}, 94: {46: 28, 114: 7, 85: 41, 92: 35}, 95: {90: 16, 140: 14, 30: 18, 51: 50, 132: 26, 92: 15, 71: 27}, 96: {62: 44, 86: 24, 92: 12}, 97: {60: 4, 25: 2}, 98: {6: 14, 3: 46, 110: 21, 79: 35, 29: 42}, 99: {71: 40, 111: 36, 7: 4, 115: 13}, 100: {45: 38, 8: 35}, 101: {6: 42, 139: 43}, 102: {10: 40, 113: 18, 116: 9, 39: 18}, 103: {19: 39, 135: 40, 39: 36, 72: 9}, 104: {59: 24, 135: 22}, 105: {67: 48, 130: 47, 75: 44}, 106: {86: 43, 133: 42}, 107: {89: 31, 24: 45}, 108: {90: 8, 138: 35, 48: 35, 77: 35}, 109: {4: 40, 59: 17, 58: 18}, 110: {64: 23, 38: 26, 88: 32, 7: 12, 98: 21, 9: 14, 91: 39}, 111: {53: 30, 99: 36, 118: 18}, 112: {93: 9, 11: 14, 80: 27, 42: 6}, 113: {102: 18, 29: 2, 5: 35, 78: 47, 43: 31}, 114: {94: 7, 139: 42, 49: 37}, 115: {66: 12, 99: 13}, 116: {82: 27, 41: 31, 102: 9, 34: 8, 65: 43}, 117: {78: 21, 79: 22, 74: 31, 37: 9}, 118: {36: 3, 111: 18}, 119: {49: 11, 27: 21, 22: 41}, 120: {74: 41, 29: 26, 62: 38, 40: 41, 9: 42}, 121: {2: 31, 3: 19}, 122: {39: 3, 89: 44}, 123: {11: 41, 85: 10, 7: 9, 137: 40}, 124: {59: 8, 81: 15, 31: 40}, 125: {80: 3, 8: 8, 32: 42}, 126: {65: 31, 83: 34, 45: 14, 5: 46, 11: 15}, 127: {19: 10, 1: 33}, 128: {10: 3, 44: 13}, 129: {85: 24, 6: 2, 51: 37}, 130: {6: 50, 59: 31, 78: 19, 105: 47, 67: 12}, 131: {2: 46, 39: 33}, 132: {42: 10, 95: 26, 6: 2}, 133: {39: 5, 106: 42}, 134: {20: 29}, 135: {103: 40, 104: 22, 83: 21}, 136: {19: 18, 29: 38}, 137: {71: 32, 123: 40}, 138: {22: 30, 108: 35, 77: 47}, 139: {57: 36, 48: 21, 114: 42, 101: 43, 5: 32}, 140: {95: 14, 78: 20}}
            g = size140
        if size == 190:
            size190 = {1: {2: 40, 4: 1, 29: 14, 79: 22, 59: 11, 187: 31}, 2: {1: 40, 3: 30, 8: 2, 13: 4, 34: 1, 36: 19, 42: 21, 57: 15, 59: 6, 170: 23, 40: 40, 9: 28, 92: 38}, 3: {2: 30, 5: 13, 17: 13, 62: 42, 145: 19, 56: 20, 159: 23, 31: 22}, 4: {1: 1, 11: 24, 35: 33, 165: 19, 74: 31, 78: 1, 146: 49}, 5: {3: 13, 6: 8, 7: 29, 14: 9, 24: 32, 19: 24}, 6: {5: 8, 16: 30, 18: 29, 21: 35, 23: 6, 95: 12}, 7: {5: 29, 9: 33, 10: 31, 12: 22, 25: 18, 39: 7, 50: 39, 74: 23, 23: 1, 176: 47}, 8: {2: 2, 76: 14, 112: 11, 179: 24, 46: 38, 160: 3}, 9: {7: 33, 22: 24, 55: 39, 85: 46, 172: 35, 121: 16, 157: 48, 72: 44, 2: 28, 118: 42}, 10: {7: 31, 15: 22, 65: 18, 50: 46, 119: 33}, 11: {4: 24, 26: 20, 84: 5, 108: 29, 170: 4, 155: 21}, 12: {7: 22, 65: 22, 92: 9, 97: 25, 98: 36, 168: 14, 131: 2}, 13: {2: 4, 111: 24, 24: 18, 63: 4, 43: 24, 39: 46, 138: 43, 35: 23}, 14: {5: 9, 30: 37, 95: 31, 29: 23, 47: 45, 186: 10, 66: 37}, 15: {10: 22, 27: 24, 78: 5, 128: 47, 168: 14, 117: 38}, 16: {6: 30, 81: 47, 136: 17, 26: 31, 21: 45}, 17: {3: 13, 19: 44, 43: 18, 73: 15, 59: 10}, 18: {6: 29, 170: 33}, 19: {17: 44, 20: 27, 159: 49, 5: 24}, 20: {19: 27, 106: 22, 130: 43, 166: 48, 53: 35}, 21: {6: 35, 31: 35, 56: 19, 107: 38, 121: 47, 26: 3, 16: 45, 29: 34}, 22: {9: 24, 53: 50, 72: 42, 105: 25, 172: 16}, 23: {6: 6, 51: 28, 63: 44, 64: 32, 94: 26, 180: 11, 172: 8, 7: 1, 29: 36}, 24: {5: 32, 28: 26, 33: 8, 118: 1, 13: 18, 72: 24, 158: 24, 39: 16, 152: 19, 132: 37}, 25: {7: 18, 54: 7, 147: 1, 107: 17, 126: 41}, 26: {11: 20, 44: 45, 48: 13, 138: 18, 21: 3, 16: 31}, 27: {15: 24, 148: 21, 155: 13, 163: 26}, 28: {24: 26, 142: 37, 115: 2, 39: 49}, 29: {1: 14, 152: 50, 14: 23, 21: 34, 51: 38, 23: 36}, 30: {14: 37, 32: 32}, 31: {21: 35, 176: 50, 185: 27, 143: 17, 127: 33, 174: 26, 3: 22}, 32: {30: 32, 167: 48, 48: 42}, 33: {24: 8, 49: 33, 88: 21, 157: 32, 170: 33, 66: 24, 149: 20}, 34: {2: 1, 46: 44, 186: 16, 40: 6}, 35: {4: 33, 37: 2, 38: 20, 107: 8, 150: 49, 13: 23, 175: 35, 96: 34}, 36: {2: 19, 40: 29, 52: 15, 70: 25, 103: 8, 160: 12, 72: 43}, 37: {35: 2, 141: 21, 75: 6, 74: 23, 61: 37, 63: 32}, 38: {35: 20, 41: 40, 119: 35, 158: 15, 70: 31}, 39: {7: 7, 93: 28, 124: 11, 13: 46, 24: 16, 154: 36, 71: 11, 28: 49}, 40: {36: 29, 96: 17, 64: 26, 60: 13, 2: 40, 106: 46, 34: 6}, 41: {38: 40, 45: 26, 135: 6, 181: 10, 108: 43}, 42: {2: 21, 125: 50, 171: 41}, 43: {17: 18, 13: 24, 123: 38, 136: 18, 172: 37}, 44: {26: 45, 114: 8, 134: 37}, 45: {41: 26, 58: 18}, 46: {34: 44, 47: 30, 146: 27, 8: 38}, 47: {46: 30, 77: 4, 131: 9, 14: 45, 101: 15, 107: 45}, 48: {26: 13, 99: 20, 160: 4, 32: 42}, 49: {33: 33, 113: 14}, 50: {7: 39, 190: 4, 96: 50, 10: 46}, 51: {23: 28, 61: 16, 67: 1, 183: 7, 29: 38}, 52: {36: 15, 68: 25, 65: 19}, 53: {22: 50, 169: 15, 20: 35, 154: 38, 95: 25}, 54: {25: 7, 135: 3, 132: 4}, 55: {9: 39, 69: 43, 103: 42, 181: 5}, 56: {21: 19, 60: 33, 86: 15, 3: 20, 149: 35}, 57: {2: 15}, 58: {45: 18, 75: 43, 119: 7, 69: 19}, 59: {2: 6, 140: 33, 17: 10, 1: 11}, 60: {56: 33, 63: 30, 40: 13}, 61: {51: 16, 135: 23, 37: 37}, 62: {3: 42, 71: 11, 82: 33, 89: 7, 155: 17, 104: 3, 102: 32}, 63: {23: 44, 66: 26, 13: 4, 60: 30, 180: 32, 37: 32, 164: 38}, 64: {23: 32, 80: 25, 83: 18, 40: 26, 79: 38, 135: 12}, 65: {12: 22, 10: 18, 118: 11, 71: 22, 52: 19}, 66: {63: 26, 133: 28, 188: 34, 164: 36, 172: 42, 33: 24, 14: 37, 146: 28}, 67: {51: 1, 90: 17, 120: 49}, 68: {52: 25}, 69: {55: 43, 137: 12, 171: 39, 58: 19}, 70: {36: 25, 122: 14, 38: 31}, 71: {62: 11, 65: 22, 39: 11, 154: 32}, 72: {22: 42, 24: 24, 36: 43, 9: 44}, 73: {17: 15}, 74: {7: 23, 4: 31, 37: 23, 95: 10}, 75: {58: 43, 109: 29, 150: 38, 37: 6, 190: 10, 81: 33}, 76: {8: 14, 85: 30}, 77: {47: 4, 109: 3, 153: 33}, 78: {15: 5, 92: 35, 4: 1, 132: 31, 177: 49}, 79: {1: 22, 86: 46, 64: 38, 190: 17}, 80: {64: 25, 139: 36}, 81: {16: 47, 104: 38, 75: 33}, 82: {62: 33, 101: 27, 110: 32, 187: 2, 143: 13}, 83: {64: 18, 87: 32, 153: 38}, 84: {11: 5}, 85: {9: 46, 91: 7, 76: 30}, 86: {79: 46, 163: 27, 56: 15, 161: 16}, 87: {83: 32, 149: 35, 177: 9}, 88: {33: 21}, 89: {62: 7, 96: 42, 120: 49, 153: 6, 163: 45, 109: 29, 129: 21}, 90: {67: 17, 167: 23}, 91: {85: 7, 117: 21, 93: 9}, 92: {12: 9, 100: 28, 78: 35, 109: 45, 187: 39, 2: 38}, 93: {39: 28, 91: 9}, 94: {23: 26, 167: 45, 109: 7}, 95: {14: 31, 126: 22, 99: 32, 6: 12, 122: 50, 74: 10, 53: 25}, 96: {89: 42, 132: 17, 40: 17, 161: 24, 50: 50, 35: 34, 97: 9}, 97: {12: 25, 164: 46, 131: 44, 123: 45, 152: 9, 96: 9}, 98: {12: 36, 173: 17, 159: 10}, 99: {48: 20, 95: 32}, 100: {92: 28, 102: 31, 116: 6, 104: 19, 184: 2, 180: 7, 134: 37, 138: 14}, 101: {82: 27, 147: 4, 155: 18, 47: 15, 104: 8, 102: 30}, 102: {100: 31, 62: 32, 101: 30}, 103: {36: 8, 55: 42, 185: 13, 183: 33}, 104: {81: 38, 100: 19, 62: 3, 101: 8}, 105: {22: 25, 182: 16, 132: 14}, 106: {20: 22, 154: 36, 156: 24, 40: 46}, 107: {21: 38, 139: 50, 143: 33, 35: 8, 116: 39, 180: 6, 25: 17, 47: 45, 111: 47}, 108: {11: 29, 115: 6, 123: 7, 133: 47, 41: 43}, 109: {75: 29, 117: 22, 77: 3, 92: 45, 89: 29, 94: 7}, 110: {82: 32, 126: 22}, 111: {13: 24, 184: 1, 107: 47}, 112: {8: 11, 122: 24}, 113: {49: 14, 140: 36, 169: 13}, 114: {44: 8}, 115: {108: 6, 182: 24, 28: 2}, 116: {100: 6, 107: 39, 167: 27, 168: 28}, 117: {109: 22, 184: 11, 15: 38, 91: 21, 166: 7}, 118: {24: 1, 163: 2, 175: 33, 65: 11, 141: 24, 9: 42}, 119: {38: 35, 58: 7, 139: 12, 163: 23, 10: 33}, 120: {89: 49, 161: 18, 139: 44, 67: 49}, 121: {21: 47, 9: 16, 184: 25}, 122: {70: 14, 112: 24, 167: 44, 95: 50}, 123: {108: 7, 162: 18, 174: 19, 43: 38, 143: 31, 97: 45}, 124: {39: 11, 127: 26}, 125: {42: 50}, 126: {95: 22, 110: 22, 149: 25, 25: 41}, 127: {124: 26, 129: 14, 31: 33, 170: 10}, 128: {15: 47, 144: 29, 183: 34, 184: 29}, 129: {127: 14, 89: 21}, 130: {20: 43}, 131: {47: 9, 177: 29, 97: 44, 139: 35, 133: 16, 12: 2}, 132: {96: 17, 105: 14, 54: 4, 78: 31, 24: 37}, 133: {66: 28, 108: 47, 145: 46, 131: 16}, 134: {44: 37, 151: 32, 159: 32, 178: 20, 100: 37}, 135: {41: 6, 54: 3, 61: 23, 64: 12}, 136: {16: 17, 43: 18}, 137: {69: 12, 177: 15}, 138: {26: 18, 13: 43, 100: 14}, 139: {107: 50, 120: 44, 80: 36, 131: 35, 119: 12}, 140: {59: 33, 189: 24, 113: 36}, 141: {37: 21, 159: 46, 149: 19, 183: 14, 118: 24}, 142: {28: 37}, 143: {107: 33, 31: 17, 123: 31, 82: 13, 183: 25}, 144: {128: 29, 145: 49, 146: 29, 190: 27}, 145: {144: 49, 133: 46, 3: 19}, 146: {46: 27, 144: 29, 4: 49, 66: 28}, 147: {101: 4, 25: 1}, 148: {27: 21}, 149: {87: 35, 141: 19, 56: 35, 33: 20, 126: 25}, 150: {75: 38, 35: 49}, 151: {134: 32, 166: 4}, 152: {29: 50, 157: 3, 24: 19, 97: 9}, 153: {89: 6, 77: 33, 83: 38}, 154: {106: 36, 53: 38, 39: 36, 71: 32}, 155: {101: 18, 62: 17, 11: 21, 174: 7, 27: 13}, 156: {106: 24}, 157: {33: 32, 152: 3, 9: 48}, 158: {38: 15, 24: 24}, 159: {134: 32, 141: 46, 19: 49, 98: 10, 3: 23, 170: 3}, 160: {36: 12, 170: 5, 48: 4, 8: 3}, 161: {120: 18, 180: 30, 96: 24, 86: 16}, 162: {123: 18}, 163: {118: 2, 86: 27, 89: 45, 119: 23, 27: 26}, 164: {97: 46, 66: 36, 63: 38}, 165: {4: 19}, 166: {20: 48, 151: 4, 117: 7}, 167: {90: 23, 122: 44, 94: 45, 32: 48, 116: 27}, 168: {15: 14, 12: 14, 116: 28}, 169: {53: 15, 113: 13}, 170: {11: 4, 2: 23, 186: 2, 33: 33, 127: 10, 160: 5, 18: 33, 159: 3}, 171: {69: 39, 42: 41}, 172: {9: 35, 22: 16, 43: 37, 66: 42, 23: 8}, 173: {98: 17}, 174: {123: 19, 31: 26, 155: 7, 177: 34}, 175: {118: 33, 35: 35}, 176: {31: 50, 7: 47}, 177: {87: 9, 131: 29, 78: 49, 137: 15, 174: 34}, 178: {134: 20}, 179: {8: 24}, 180: {23: 11, 190: 17, 161: 30, 63: 32, 107: 6, 100: 7}, 181: {41: 10, 55: 5}, 182: {115: 24, 105: 16}, 183: {128: 34, 51: 7, 141: 14, 143: 25, 103: 33}, 184: {117: 11, 128: 29, 111: 1, 100: 2, 121: 25}, 185: {31: 27, 103: 13}, 186: {34: 16, 170: 2, 14: 10}, 187: {82: 2, 92: 39, 1: 31}, 188: {66: 34}, 189: {140: 24}, 190: {180: 17, 50: 4, 75: 10, 144: 27, 79: 17}}
            g = size190

        min = 3
        start = 1
        end = len (g.keys())
        test = BB(g,min,start,end)
        if select == "graph":
            return g
        else:
            return test

    def get_density(self,graph):
        """ Calculate the density of a graph
        :param graph: the graph that we calculate its density
        density = (actual number of edges)/(possible number of edges)
        possible number of edges = number of nodes choose 2

        returns: float
            density
        """
        possible_edges = comb(len(graph), 2, exact=True, repetition=False)
        # possible_edges = len(graph.keys()) * (len(graph.keys()) - 1)
        # get actual number of edges
        edges = (sum([len(graph[x]) for x in graph])) / 2
        density = edges / possible_edges
        return density


class BBTests(ut.TestCase):
    def test(self):
        pass


def main():

    # # start experiments
    test = Experiments()
    # test by different sizes
    print("plotting..........")
    test.plot_by_size(10)
    # test by different mins
    test.plot_by_min([5,10,15,20,25],10)
    # test by density
    test.plot_by_density(10)
    # test tiny graph
    test.test_tiny_graph()


    # Random Graph Test
    # num_of_nodes = 90
    # num_of_edges = 150
    # g5 = Graph()
    # g5.generate_connected_graph(num_of_nodes, num_of_edges, 50)
    # g5.create_adjacency_list()
    # start = 1
    # end = len(g5.adjacency_list.keys())
    # min =3
    # print(g5.adjacency_list)
    # bb = BB(g5.adjacency_list,min,start,end)
    # print(bb.shortest_path())

if __name__ == "__main__":
    main()


